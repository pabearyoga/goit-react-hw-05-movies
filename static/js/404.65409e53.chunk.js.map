{"version":3,"file":"static/js/404.65409e53.chunk.js","mappings":"yOACA,EAA2B,uBAA3B,EAA6D,uBAA7D,EAA+F,uBAA/F,EAAiI,uBAAjI,EAAoK,wBAApK,EAA2M,2B,mBCmD1M,EAxCY,WAAO,IAAD,EACPA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,CAAC,GAAlC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAaA,OAXAC,EAAAA,EAAAA,YAAU,WACNP,GAAWM,GAAa,IAExBE,EAAAA,EAAAA,IAAiBR,GACZS,MAAK,SAAAC,GACFN,EAAQM,EACX,IACAC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,EAAhB,IACTG,QAAQT,GAAa,GAC7B,GAAE,CAACN,KAEI,gBAAIgB,UAAWC,EAAf,UACHZ,IAAa,SAACa,EAAAA,OAAD,MACZ,OAACf,QAAD,IAACA,GAAD,UAACA,EAAMA,YAAP,QAAC,EAAYgB,UAAd,OAAwBhB,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAMA,KAAKiB,KAChC,gBAxBMC,EAyBFC,EADJ,EACIA,QACAC,EAFJ,EAEIA,aACAC,EAHJ,EAGIA,KACAC,EAJJ,EAIIA,qBACAC,EALJ,EAKIA,UALJ,OAOI,gBAAIV,UAAWC,EAAf,UACKM,GAAgB,gBAAKI,KAhCxBN,EAgCsCE,EA/B9C,GAAN,OAAUK,EAAAA,IAAV,OAAsBP,IA+B6CQ,IAAKL,KACjD,gBAAKG,IAAKG,EAAmBD,IAAKL,KACzC,iBAAKR,UAAWC,EAAhB,WACI,cAAGD,UAAS,UAAKC,EAAL,YAAqBA,GAAjC,SAAmDO,GAAQ,OAC3D,eAAGR,UAAS,UAAKC,EAAL,YAAqBA,GAAjC,wBAAiES,GAAa,QAC9E,cAAGV,UAAWC,EAAd,SAA6BQ,GAAwB,WAN3BH,EAPtC,OAmBX,C,qOCjDYM,EAAY,kCAEnBG,EAAS,mCAAG,kGAASC,EAAT,EAASA,SAAT,IAAmBC,MAAAA,OAAnB,MAAyB,CAAC,EAA1B,EAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEnBC,EAAc,IAAIC,iBAAJ,QACpBC,QAAS,oCACNJ,IALa,kBAOTC,EAAAA,EAAAA,IAAA,UACGF,EADH,YACeG,IACnB1B,MAAK,SAAA6B,GACJ,OAAwB,MAApBA,EAASC,OACJC,QAAQC,OAAR,iBAAyBH,EAASI,UAGP,IAAhCJ,EAASK,KAAKC,cACTJ,QAAQC,OACb,8CAIGH,EAASK,IACjB,IACAhC,OAAM,SAAAC,GACL,OAAO4B,QAAQC,OAAO7B,EACvB,KAxBa,2CAAH,sDA2BFiC,EAAoB,WAC/B,OAAOd,EAAU,CAAEC,SAAU,uBAC9B,EAGYc,EAAyB,SAACC,GACrC,OAAOhB,EAAU,CACfC,SAAU,gBACVC,MAAO,CAACc,MAAAA,IAEX,EAEYC,EAAsB,SAAChD,GAClC,OAAO+B,EAAU,CACfC,SAAS,UAAD,OAAYhC,IAEvB,EACYQ,EAAmB,SAACR,GAC/B,OAAO+B,EAAU,CACfC,SAAS,UAAD,OAAYhC,EAAZ,aAEX,EAEYiD,EAAsB,SAACjD,GAClC,OAAO+B,EAAU,CACfC,SAAS,UAAD,OAAYhC,EAAZ,aAEX,C","sources":["webpack://react-homework-template/./src/components/Cats/Cast.module.css?fb13","components/Cats/Cast.jsx","servises/MovieAPI.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"CastList\":\"Cast_CastList__hf7x4\",\"CastItem\":\"Cast_CastItem__IldP1\",\"CastInfo\":\"Cast_CastInfo__-QJD8\",\"CastText\":\"Cast_CastText__SjfCW\",\"CastTitle\":\"Cast_CastTitle__ksjKx\",\"CastSubTitle\":\"Cast_CastSubTitle__a-yda\"};","import { useParams } from \"react-router-dom\"\nimport { useState, useEffect } from \"react\"\nimport { getMovieCastById, IMAGE_URL } from \"servises/MovieAPI\"\nimport unknown_personIMG from 'images/unknown_person.png'\nimport css from './Cast.module.css'\nimport { Loader } from \"components/Loader/Loader\"\n\nconst imageUrl = (poster) => {\n    return `${IMAGE_URL}${poster}`\n}\n\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState({})\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        movieId && setIsLoading(true);\n\n        getMovieCastById(movieId)\n            .then(results => {\n                setCast(results);\n            })\n            .catch(err => console.log(err))\n            .finally(setIsLoading(false));\n    }, [movieId]);\n\n    return (<ul className={css.CastList}>\n        {isLoading && <Loader/>}\n        {!!cast?.cast?.length && cast?.cast.map(\n            ({\n                cast_id,\n                profile_path,\n                name,\n                known_for_department,\n                character,\n            }) => (\n                <li className={css.CastItem} key={cast_id}>\n                    {profile_path ? (<img src={imageUrl(profile_path)} alt={name} />)\n                        : (<img src={unknown_personIMG} alt={name} />)}\n                    <div className={css.CastInfo}>\n                        <p className={`${css.CastText} ${css.CastTitle}`}>{name || '-'}</p>\n                        <p className={`${css.CastText} ${css.CastSubTitle}`}>Character: {character || '-'}</p>\n                        <p className={css.CastText}>{known_for_department || '-'}</p>\n                    </div>\n                </li>)\n        )}\n    </ul>\n    )\n}\n\n export default Cast","import axios from 'axios';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\nconst getMovies = async ({ pathName, param={} }) => {\n  axios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n  const searchParam = new URLSearchParams({\n  api_key: '8981d06a4174dd7b5006af470bdeff3a',\n  ...param\n  });\n  return axios\n    .get(`${pathName}?${searchParam}`)\n    .then(response => {\n      if (response.status !== 200) {\n        return Promise.reject(`Error: ${response.message}`);\n      }\n\n      if (response.data.total_results === 0) {\n        return Promise.reject(\n          'Sorry, no matches found. Please try again.'\n        );\n      }\n\n      return response.data;\n    })\n    .catch(err => {\n      return Promise.reject(err);\n    });\n};\n\nexport const getTrendingMovies = () => {\n  return getMovies({ pathName: '/trending/movie/day' })\n};\n\n     \nexport const getMoviesBySearchQuery = (query) => {\n  return getMovies({\n    pathName: '/search/movie',\n    param: {query}\n  })\n};\n  \nexport const getMovieDetailsById = (movieId) => {\n  return getMovies({\n    pathName: `/movie/${movieId}`\n  })\n};\nexport const getMovieCastById = (movieId) => {\n  return getMovies({\n    pathName: `/movie/${movieId}/credits`\n  })\n};\n\nexport const getMovieReviewsById = (movieId) => {\n  return getMovies({\n    pathName: `/movie/${movieId}/reviews`\n  })\n};"],"names":["movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","useEffect","getMovieCastById","then","results","catch","err","console","log","finally","className","css","Loader","length","map","poster","cast_id","profile_path","name","known_for_department","character","src","IMAGE_URL","alt","unknown_personIMG","getMovies","pathName","param","axios","searchParam","URLSearchParams","api_key","response","status","Promise","reject","message","data","total_results","getTrendingMovies","getMoviesBySearchQuery","query","getMovieDetailsById","getMovieReviewsById"],"sourceRoot":""}